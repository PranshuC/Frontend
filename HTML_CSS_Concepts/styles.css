/* 
  In order to apply styling to an element 
  you would want to get the particular element
  Specificity- that should be available in css as well 
  in order to find an html element
  
  CSS(Cascading Style Sheet) adds skin to HTML skeleton
  Selectors :
1) . - class 
   .cl {
  
   }
2) # - id
   #app{
  
   }
3) element
   div {
  
   }

Styling applied line by line, next style overwrites previous 1 : Order matters
*/

html {
    font-size: 10px;
  }
  
  #app {
    background: purple;
  }

/*
   Specificity principal says :
   id- 100
   class - 010
   element - 001
   Priority matters more thn order

   ID has highest specificity : 100 (Ex : #app)

   !importanrt - above all specifities - for particular style
   (not suggested to use) - others' changes not reflect
   But needed when using 3rd party widget (ex : chat-widget)
*/

  /* div {
    border: 1px solid red;
    width: 200px;
    height: 200px;
    background: orange;
  } 
  Specificity = 1 (element)
  */

  .parent .pink {
    background: pink;
    width: 400px;
    height: 20em;
    font-size: 20px;
  }
  /* Find an element whose child class is pink, parent class is parent 
    10(parent) + 10(pink) = 20
    Always best to add 1 parent - more specific
    Prevent overwritten, when next developer adds lines to end of file
    2 levels of hierarchy - bare minimum
  */
  
  .grand .parent .blue {
    background: blue;
    margin-top: 40px;
  }
  /* Every class has accumulated weight :
    10(grand) + 10(parent) + 10(blue) + 1(if span added) = 30 */
  
  .red {
    background: red;
  }
  
  .pink {
    background: black;
  }

  .cl {
    border: 1px solid red;
    width: 20rem !important;
    height: 20em;
    font-size: 10px;
    /* 
    20rem 20*16  
    x*16= 200
    x = 200/16
    x=12.5
    */
    background: yellow;
    margin-bottom: 60px;
    padding: 10px;
    box-sizing: content-box;
  }
  
/* Box model in CSS :
  box in css through which the whole css is driven.

1. margin - give some distance between two boxes, use margin
  top, left, right, bottom
  margin-top (individual mention)
  margin: top right bottom left (short-hand clock-wise values)
2. border - line drawn across the box
3. padding - distance between the content and the border
  padding: top right bottom left (short-hand clock-wise values)
4. width/height (dimensions of content)
  
  margin-collapse : margin-top and margin-bottom - take max margin
  box-sizing: content-box (by default), 
  border-box (restrict content in width/height; accomodate border, padding within)

  */
  
  .in {
    width: 100px;
    background: red;
    height: 200px;
    display: inline-block;
  }

/*
  Inline elements doesn't get impacted by height/width properties
  display: inline - makes block element inlined
  display: inline-block - best of bot worlds, takes height/width 
  provided in css and bring 2 elements side-by-side as well
*/
  
/* 3 boxes side-by-side covering whole screen width combined */
  .box {
    width: 33.33%;
    height: 200px;
    background: #ffff00;
    float: left;
    box-sizing: border-box;
  }
  
  .one {
    background: red;
  }
  
  .two {
    background: blue;
  }
  
  .three {
    background: green;
  }
  
  /* 
  inline-block elements always leave some margin, but
  float - floats either left/right, come out in parent
  float: left - one | two | three; float: right - three | two | one
  */

 /*  https://css-tricks.com/centering-css-complete-guide/ */
